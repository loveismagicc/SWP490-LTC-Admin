import React, { useRef, useState } from "react";
import DataTable from "../../components/DataTable/DataTable";
import PopupModal from "../../components/Popup/PopupModal";
import { roomService } from "../../services/roomService";
import { toast } from "react-toastify";
import { useNavigate } from "react-router-dom";
import { authService } from "../../services/authService"; // üëà import authService
import "./Rooms.scss";

const Rooms = () => {
    const tableRef = useRef();
    const navigate = useNavigate();

    const user = authService.getUser(); // üëà l·∫•y th√¥ng tin user (role, name,...)

    const [filters, setFilters] = useState({
        city: "",
        hotelName: "",
    });

    const [showModal, setShowModal] = useState(false);
    const [popupConfig, setPopupConfig] = useState({
        title: "",
        message: "",
        onConfirm: () => {},
    });

    const openConfirm = (title, message, callback) => {
        setPopupConfig({
            title,
            message,
            onConfirm: () => {
                callback();
                setShowModal(false);
            },
        });
        setShowModal(true);
    };

    const columns = [
        { key: "name", label: "T√™n ph√≤ng" },
        { key: "hotelName", label: "Kh√°ch s·∫°n" },
        { key: "quantity", label: "S·ªë l∆∞·ª£ng" },
        { key: "price", label: "Gi√° (VNƒê)" },
        { key: "amenities", label: "Ti·ªán nghi", render: (val) => val?.join(", ") },
        { key: "status", label: "Tr·∫°ng th√°i", render: (val) => (val === "active" ? "Hi·ªÉn th·ªã" : "ƒê√£ ·∫©n") },
    ];

    const fetchData = async (page, limit, search) => {
        try {
            const res = await roomService.getRooms(page, limit, search, filters);
            return {
                data: res.data,
                total: res.total,
            };
        } catch {
            toast.error("‚ùå Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph√≤ng");
            return { data: [], total: 0 };
        }
    };

    const handleToggleVisibility = async (row) => {
        openConfirm("·∫®n / Hi·ªán ph√≤ng", "B·∫°n c√≥ ch·∫Øc mu·ªën thay ƒë·ªïi tr·∫°ng th√°i hi·ªÉn th·ªã?", async () => {
            try {
                await roomService.toggleVisibility(row._id);
                toast.success("üëÅÔ∏è ƒê√£ thay ƒë·ªïi tr·∫°ng th√°i ph√≤ng");
                tableRef.current?.reload();
            } catch {
                toast.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ph√≤ng");
            }
        });
    };

    const handleEditRoom = (row) => {
        navigate(`/hotels/${row.hotelId}/rooms/${row._id}`);
    };

    const getActions = (row) => [
        {
            label: "S·ª≠a",
            icon: "‚úèÔ∏è",
            action: handleEditRoom,
        },
        {
            label: "·∫®n / Hi·ªán",
            icon: "üëÅÔ∏è",
            action: handleToggleVisibility,
        },
    ];

    const handleFilterChange = (e) => {
        setFilters((prev) => ({
            ...prev,
            [e.target.name]: e.target.value,
        }));
        setTimeout(() => {
            tableRef.current?.reload();
        }, 100);
    };

    const handleAddRoom = () => {
        navigate("/rooms/new");
    };

    return (
        <div className="rooms-page">
            <div className="table-header">
                <h2>Danh s√°ch ph√≤ng</h2>

                <div className="filters">
                    <input
                        type="text"
                        name="hotelName"
                        placeholder="T√™n kh√°ch s·∫°n"
                        value={filters.hotelName}
                        onChange={handleFilterChange}
                    />
                    <input
                        type="text"
                        name="city"
                        placeholder="T·ªânh / Th√†nh ph·ªë"
                        value={filters.city}
                        onChange={handleFilterChange}
                    />
                </div>

                {user?.role === "hotel_owner" && (
                    <button className="add-room-btn" onClick={handleAddRoom}>
                        ‚ûï Th√™m ph√≤ng
                    </button>
                )}
            </div>

            <DataTable
                ref={tableRef}
                columns={columns}
                fetchData={fetchData}
                actions={getActions}
                onRowClick={handleEditRoom}
            />

            {showModal && (
                <PopupModal
                    title={popupConfig.title}
                    message={popupConfig.message}
                    onClose={() => setShowModal(false)}
                    onConfirm={popupConfig.onConfirm}
                />
            )}
        </div>
    );
};

export default Rooms;
